/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OneInchSwapper,
  OneInchSwapperInterface,
} from "../../../contracts/swapagg.sol/OneInchSwapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_oneInch",
        type: "address",
      },
      {
        internalType: "address",
        name: "_inToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_outToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "inToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oneInch",
    outputs: [
      {
        internalType: "contract IOneInch",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "outToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSlippage",
        type: "uint256",
      },
    ],
    name: "swapTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d3e380380610d3e8339818101604052810190610032919061015f565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506101b2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012c82610101565b9050919050565b61013c81610121565b811461014757600080fd5b50565b60008151905061015981610133565b92915050565b600080600060608486031215610178576101776100fc565b5b60006101868682870161014a565b93505060206101978682870161014a565b92505060406101a88682870161014a565b9150509250925092565b610b7d806101c16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063045c08d51461005157806333db82fd1461006f5780636c8253271461008d57806388ab076f146100ab575b600080fd5b6100596100c7565b60405161006691906104bb565b60405180910390f35b6100776100eb565b60405161008491906104f7565b60405180910390f35b610095610111565b6040516100a291906104f7565b60405180910390f35b6100c560048036038101906100c0919061055c565b610137565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663085e2c5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688600a60006040518663ffffffff1660e01b81526004016101e3959493929190610621565b600060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061022991906107e2565b809350819450829550505050600061026b61271061025d8761271061024e919061089c565b8761041090919063ffffffff16565b61042690919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b81526004016102ea9291906108f1565b6020604051808303816000875af1158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610952565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2a7515e600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689858860006040518763ffffffff1660e01b81526004016103d696959493929190610a3d565b600060405180830381600087803b1580156103f057600080fd5b505af1158015610404573d6000803e3d6000fd5b50505050505050505050565b6000818361041e9190610aa5565b905092915050565b600081836104349190610b16565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061048161047c6104778461043c565b61045c565b61043c565b9050919050565b600061049382610466565b9050919050565b60006104a582610488565b9050919050565b6104b58161049a565b82525050565b60006020820190506104d060008301846104ac565b92915050565b60006104e182610488565b9050919050565b6104f1816104d6565b82525050565b600060208201905061050c60008301846104e8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61053981610526565b811461054457600080fd5b50565b60008135905061055681610530565b92915050565b600080604083850312156105735761057261051c565b5b600061058185828601610547565b925050602061059285828601610547565b9150509250929050565b6105a581610526565b82525050565b6000819050919050565b60006105d06105cb6105c6846105ab565b61045c565b610526565b9050919050565b6105e0816105b5565b82525050565b6000819050919050565b600061060b610606610601846105e6565b61045c565b610526565b9050919050565b61061b816105f0565b82525050565b600060a08201905061063660008301886104e8565b61064360208301876104e8565b610650604083018661059c565b61065d60608301856105d7565b61066a6080830184610612565b9695505050505050565b60008151905061068381610530565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106d78261068e565b810181811067ffffffffffffffff821117156106f6576106f561069f565b5b80604052505050565b6000610709610512565b905061071582826106ce565b919050565b600067ffffffffffffffff8211156107355761073461069f565b5b602082029050602081019050919050565b600080fd5b600061075e6107598461071a565b6106ff565b9050808382526020820190506020840283018581111561078157610780610746565b5b835b818110156107aa57806107968882610674565b845260208401935050602081019050610783565b5050509392505050565b600082601f8301126107c9576107c8610689565b5b81516107d984826020860161074b565b91505092915050565b6000806000606084860312156107fb576107fa61051c565b5b600061080986828701610674565b935050602084015167ffffffffffffffff81111561082a57610829610521565b5b610836868287016107b4565b925050604084015167ffffffffffffffff81111561085757610856610521565b5b610863868287016107b4565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108a782610526565b91506108b283610526565b92508282039050818111156108ca576108c961086d565b5b92915050565b60006108db8261043c565b9050919050565b6108eb816108d0565b82525050565b600060408201905061090660008301856108e2565b610913602083018461059c565b9392505050565b60008115159050919050565b61092f8161091a565b811461093a57600080fd5b50565b60008151905061094c81610926565b92915050565b6000602082840312156109685761096761051c565b5b60006109768482850161093d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b481610526565b82525050565b60006109c683836109ab565b60208301905092915050565b6000602082019050919050565b60006109ea8261097f565b6109f4818561098a565b93506109ff8361099b565b8060005b83811015610a30578151610a1788826109ba565b9750610a22836109d2565b925050600181019050610a03565b5085935050505092915050565b600060c082019050610a5260008301896104e8565b610a5f60208301886104e8565b610a6c604083018761059c565b610a79606083018661059c565b8181036080830152610a8b81856109df565b9050610a9a60a0830184610612565b979650505050505050565b6000610ab082610526565b9150610abb83610526565b9250828202610ac981610526565b91508282048414831517610ae057610adf61086d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b2182610526565b9150610b2c83610526565b925082610b3c57610b3b610ae7565b5b82820490509291505056fea2646970667358221220898d13dc4c0567a5267af740622de29cd9a3cb79b71928689d37140b2a6bb1e564736f6c63430008120033";

type OneInchSwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OneInchSwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OneInchSwapper__factory extends ContractFactory {
  constructor(...args: OneInchSwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _oneInch: PromiseOrValue<string>,
    _inToken: PromiseOrValue<string>,
    _outToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OneInchSwapper> {
    return super.deploy(
      _oneInch,
      _inToken,
      _outToken,
      overrides || {}
    ) as Promise<OneInchSwapper>;
  }
  override getDeployTransaction(
    _oneInch: PromiseOrValue<string>,
    _inToken: PromiseOrValue<string>,
    _outToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _oneInch,
      _inToken,
      _outToken,
      overrides || {}
    );
  }
  override attach(address: string): OneInchSwapper {
    return super.attach(address) as OneInchSwapper;
  }
  override connect(signer: Signer): OneInchSwapper__factory {
    return super.connect(signer) as OneInchSwapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OneInchSwapperInterface {
    return new utils.Interface(_abi) as OneInchSwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OneInchSwapper {
    return new Contract(address, _abi, signerOrProvider) as OneInchSwapper;
  }
}
